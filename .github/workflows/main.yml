name: CI

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
    tags-ignore:
      - '**'

  #Run workflow manually for building and releasing on non-main branches such as development or hotfix branches.
  workflow_dispatch:
    inputs:
      buildType:
        description: Type of build/release
        required: true
        type: choice
        options:
        - dev
        - hotfix

env:
  # Define git user email and name to be used for git commits
  GIT_USER_EMAIL: "actions@github.com"
  GIT_USER_NAME: "GitHub Actions"
  ## ENV_CONFIG_FILE: ".github/env-variables.txt"

jobs:

  # CI Build Job
  build:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions: write-all
    outputs:
      ENVIRONMENT_VARIABLE_PATH: ${{ env.ENV_CONFIG_FILE }}
      UNIT_TEST_RESULTS_XML: ${{ steps.unit_test_file_name.outputs.UNIT_TEST_RESULTS_XML }}
      COVERAGE_PERCENTAGE: ${{ steps.jacoco_reporter.outputs.coverage_percentage }}
      BRANCH_RELEASE_TAG: ${{ steps.get_version.outputs.BRANCH_RELEASE_TAG }}
      BUILD_JOB_STATUS: ${{ steps.set_job_status.outputs.BUILD_JOB_STATUS}}

    steps:
      # Drafts your next Release notes as Pull Requests are merged into "main"
      - name: Create draft release
        id: draft-release
        if: github.ref == 'refs/heads/main'
        uses: release-drafter/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Check out repo at latest commit
      - name: Checkout Git Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.ref_name }}

      - name: Cache Gradle
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle
          key: ${{ runner.os }}-gradle-cache-${{ hashFiles('**/*.gradle*') }}

      - name: "Get version"
        shell: sh
        if: ${{ steps.draft-release.outputs.tag_name != null }}
        run: |
          tag=${{ steps.draft-release.outputs.tag_name }}
          echo TAG=$tag >> $GITHUB_ENV
          echo VERSION=${tag#v} >> $GITHUB_ENV
          # create VERSION file with version (will be used by the deploy process)
          echo ${tag#v} > VERSION

      - name: "Get version"
        id: get_version
        if: (github.event.inputs != '')
        shell: sh
        run: |
          latest_tag=$(git describe --tags --abbrev=0 | cut -d "-" -f 1)
          if ${{ github.event.inputs.buildType == 'hotfix' }}
          then
            tag="$latest_tag-hotfix"
          else
            short_sha=$(git rev-parse --short "${{ github.sha }}")
            if [ -n "$latest_tag" ]
            then
              tag="$latest_tag-dev.$short_sha"
            else
              tag="dev.$short_sha"
            fi
          fi
          echo TAG=$tag >> $GITHUB_ENV
          echo "BRANCH_RELEASE_TAG=$tag" >> $GITHUB_OUTPUT
          echo VERSION=${tag#v} >> $GITHUB_ENV
          # create VERSION file with version (will be used by the deploy process)
          echo ${tag#v} > VERSION

      - name: Set environment variables defined in the ENV_CONFIG_FILE
        shell: bash
        run: |
          IFS="["
          while read -r -a LINE || [ -n "$LINE" ] ; do
            if [[ -n "$LINE" && ${LINE::1} != "#" ]]; then
              echo "$LINE" | xargs;
            fi
          done < "$GITHUB_ENV"

      # Set up JDK environment
      - name: Set up JDK 1.11
        uses: actions/setup-java@v3
        with:
          distribution: corretto
          java-version: 11

      - name: Write Version Number
        shell: sh
        if: (github.ref == 'refs/heads/main') || (github.event.inputs != '')
        run: echo "\nversion=\"${VERSION}\"" >> build.gradle

      # Lint the code (fail if not successful)
   ##   - name: Linting
    ##    uses: axel-op/googlejavaformat-action@dbff853fb823671ec5781365233bf86543b13215
    #    with:
     #     args: "--set-exit-if-changed"
     #     skip-commit: true
     #     github-token: ${{ secrets.GITHUB_TOKEN }}

      - name : executable permissions
        run : chmod +x gradlew

      # Build the source
      - name: Build with Gradle
        env:
          ARTIFACTORY_TOKEN: ${{ secrets[env.ARTIFACTORY_TOKEN_SECRET_NAME] }}
          ARTIFACTORY_USER: ${{ env.ARTIFACTORY_USER }}
        shell: sh
        run: ./gradlew assemble
        
      
        
      # Run unit tests
      - name: Run Unit Tests
        env:
         ARTIFACTORY_TOKEN: ${{ secrets[env.ARTIFACTORY_TOKEN_SECRET_NAME] }}
         ARTIFACTORY_USER: ${{ env.ARTIFACTORY_USER }}
        shell: sh
        run: ./gradlew test

      # Publish artifacts to local dir
      ##- name: Publish artifacts
      ##  env:
       #  ARTIFACTORY_TOKEN: ${{ secrets[env.ARTIFACTORY_TOKEN_SECRET_NAME] }}
        # ARTIFACTORY_USER: ${{ env.ARTIFACTORY_USER }}
       # shell: sh
       # run: ./gradlew publish

      # Find code coverage reports for developer review and badge rendering
      - name: Get Code Coverage File Path
        shell: sh
        run: |
          echo CODE_COV_RESULTS_ARTIFACT=$(find . -iname "*jacocoTestReport.xml*") >> $GITHUB_ENV
          echo ${{ env.CODE_COV_RESULTS_ARTIFACT }}

      # Find unit test results file and rename it
      - name: Get Unit Test Results File Path and Rename
        shell: sh
        id: unit_test_file_name
        run: |
          mkdir unit-test-results
          mv $(find . -iname "*TEST-*.xml*") unit-test-results
           echo UNIT_TEST_RESULTS_XML=unit-test-results/*.xml >> $GITHUB_ENV
           echo "UNIT_TEST_RESULTS_XML=${UNIT_TEST_RESULTS_XML}" >> $GITHUB_OUTPUT

      # Create unit test results-report for easy developer review within GitHub ecosystem
      - name: Create Unit Test Results Report
        id: unit_test_report
        uses: dorny/test-reporter@v1.6.0
        if: success() || failure()
        with:
          name: Unit Test Results
          path: ${{ env.UNIT_TEST_RESULTS_XML }}
          reporter: java-junit
          only-summary: 'false'
          fail-on-error: 'true'   #Set True to enable Quality Gate

      # Upload unit test results path for developer review and badge rendering
      - name: Upload Unit Test Results Artifact for Badges
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-results
          path: ${{ env.UNIT_TEST_RESULTS_XML }}

      - name: listing
        run: ls -laRt
        
      - name: zip for GitHub releases
        shell: pwsh
        run: |
         Compress-Archive -Path  build\libs\*  -Destination ${{ github.event.repository.name }}.zip
         ls
      - name: Create Release and Upload Artifacts
        uses: ncipollo/release-action@v1
        with:
          artifacts: ${{ github.event.repository.name }}.zip
          tag: "${{ github.run_number }}"
          name: "${{ github.run_number }}"
          allowUpdates: true
          replacesArtifacts: false

      # generates coverage-report.md and publishes as checkrun
      #- name: JaCoCo Code Coverage Report
       # id: jacoco_reporter
       # uses: PavanMudigonda/jacoco-reporter@v4.8
       # with:
       #   coverage_results_path: ${{ env.CODE_COV_RESULTS_ARTIFACT }}
        #  coverage_report_name: coverage
         # coverage_report_title: Java Code Coverage
          # github_token: ${{ secrets.GITHUB_TOKEN }}
         # skip_check_run: false
         # minimum_coverage: ${{ env.CODE_COV_THRESHOLD }}
         # fail_below_threshold: true #Set True to enable Quality Gate
         # publish_only_summary: false

      #- name: Get path to Java Artifact
       # shell: sh
        #run: echo JAVA_ARTIFACT=$(find build/libs/*.jar -type f) >> $GITHUB_ENV

      # Run devops_lead-time-action
     ## - name: Run devops_lead-time-action
      ##  uses: tr/devops_lead-time-action@v1.0.6
        ##id: lead-time
      ##  env:
        ##  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         ##   GITHUB_REPOSITORY: ${{ github.repository }}
         ## GITHUB_WORKSPACE: ${{ github.workspace }}

     # - name: fetch repo topics
      #  shell: sh
       # run: |
        #  gh_resp=$(gh api -H "Accept: application/vnd.github+json" /repos/${{ github.repository }}/topics)
        #  echo REPO_TOPICS=$(echo "$gh_resp" | jq '.names') >> $GITHUB_ENV
       # env:
        #  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    #  - name: Create and upload release-info.json
     #   shell: sh
#         if: github.ref == 'refs/heads/main'
#         id: upload-release-info
#         run: |
#           echo '{"service_name":"${{ env.SERVICE_NAME }}", "github_repository":"${{ github.repository }}", "github_sha": "${{ steps.lead-time.outputs.commit }}", "repo_topics":${{ env.REPO_TOPICS }}, "full_semver": "${{ steps.lead-time.outputs.name }}", "created_at": "${{ steps.lead-time.outputs.time }}", "lead_time_to_release_days": "${{ steps.lead-time.outputs.lead_time }}"}' > release-info.json

#       - name: Create zip of published artifacts
#         shell: sh
#         run: |
#           zip -r artifact.zip *

#       - name: Upload Release Asset
#         shell: sh
#         if: github.ref == 'refs/heads/main'
#         id: upload-release-asset
#         run: |
#           gh release upload --clobber $TAG artifact.zip
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#       - name: Create Dev/Hotfix draft release
#         if: (github.event.inputs != '')
#         uses: ncipollo/release-action@v1
#         with:
#           allowUpdates: true
#           tag: ${{ env.TAG }}
#           artifacts: artifact.zip
#           draft: true
#           commit: ${{ github.sha }}
#           token: ${{ secrets.GITHUB_TOKEN }}

#       - name: Prepare for Veracode Software Composition Analysis
#         if: ((github.ref == 'refs/heads/main') || (github.event.inputs != '')) && (env.VERACODE_SCA_AGENT_TOKEN_SECRET_NAME == null)
#         run: |
#           echo VERACODE_SCA_AGENT_TOKEN_SECRET_NAME=$(python .github/scripts/sca-workspace-hash.py --repo_name '${{ github.repository }}' --num_workspaces 15 --key_prefix 'ISRM_VERACODE_SCA_WORKSPACE_') >> $GITHUB_ENV

#       - name: Run Veracode Software Composition Analysis
#         if: (github.ref == 'refs/heads/main') || (github.event.inputs != '')
#         continue-on-error: true
#         env:
#           SRCCLR_API_TOKEN: ${{ secrets[env.VERACODE_SCA_AGENT_TOKEN_SECRET_NAME] }}
#         uses: veracode/veracode-sca@v2.1.9
#         with:
#           github_token: ${{ secrets.GITHUB_TOKEN }}
#           create-issues: true
#           allow-dirty: true
#           no-graphs: true

#       # Break the build based on Veracode flaws (severity + no-more-harm ceiling)
#       - name: Download the Pipeline Scanner
#         shell: sh
#         run: curl -O -L https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip

#       - name: Unzip the Pipeline Scanner
#         shell: sh
#         run: unzip -o pipeline-scan-LATEST.zip

#       - name: Get date-time for scan filename
#         id: time
#         run: |
#           echo "time=$(date +"%Y-%m-%d-%H-%M-%S")" >> $GITHUB_OUTPUT

#       - name: Run Pipeline Scanner
#         shell: bash
#        run: |
#           if [ -f VeracodeScanBaseline.json ] ;
#           then
#             echo "VERACODE BASELINE FILE ALREADY EXISTS!  Running the pipeline scan and filtering the results to only NEW flaws....."
#             java -jar pipeline-scan.jar -vid ${{secrets[env.VERACODE_API_ID_SECRET_NAME]}} -vkey ${{secrets[env.VERACODE_API_SECRET_SECRET_NAME]}} --file $JAVA_ARTIFACT --fail_on_severity="Very High, High" --baseline_file VeracodeScanBaseline.json -id true -sd true -jd true -V true -jf PipelineScan-${{ steps.time.outputs.time }}.json -fjf New_Filtered_Results.json
#             echo "List of New Very High or High Flaws..."
#             cat New_Filtered_Results.json
#           else
#             echo "VERACODE BASELINE FILE DOES NOT EXIST! Running the pipeline scan......"
#             java -jar pipeline-scan.jar -vid ${{secrets[env.VERACODE_API_ID_SECRET_NAME]}} -vkey ${{secrets[env.VERACODE_API_SECRET_SECRET_NAME]}} --file $JAVA_ARTIFACT --fail_on_severity="Very High, High" -id true -sd true -jd true -V true -jf PipelineScan-${{ steps.time.outputs.time }}.json -fjf New_Filtered_Results.json || true
#             echo "List of Very High or High Flaws......"
#            cat New_Filtered_Results.json
#           fi
#           if [[ "$GITHUB_REF_NAME" != "main" && "$GITHUB_REF_NAME" != *"dependabot"* && "$BRANCH_PROTECTION" != "true" ]] ;
#           then
#             git config --local user.email $GIT_USER_EMAIL
#             git config --local user.name $GIT_USER_NAME
#             echo "Committing VeracodeScanBaseline.json file to repo, to be used by all subsequent scans......."
#             cp PipelineScan-${{ steps.time.outputs.time }}.json VeracodeScanBaseline.json
#             git add "VeracodeScanBaseline.json"
#            git commit -m "Updates VeracodeScanBaseline"
#             git push origin ${{ github.ref_name }}
#           fi

#       - name: Output job status
#         id: set_job_status
#         if: always()
#         run: |
#           echo "BUILD_JOB_STATUS=${{ job.status }}" >> $GITHUB_OUTPUT

#   #  Veracode calling  workflow
# ##  call-workflow:
# ##     needs: [ build ]
#  ##    uses: tr/cicd_gh-actions-veracode/.github/workflows/veracode-upload-and-scan.yml@v4.0.1
#  ##    if: (github.ref == 'refs/heads/main') || (github.event.inputs != '')
#  ##    with:
#  ##      ENV_CONFIG_FILE: ${{ needs.build.outputs.ENVIRONMENT_VARIABLE_PATH }}
#   ##   secrets: inherit

#    Calling  workflow "Badges"
#  call-badges:
#     if: ${{ (success() || failure()) && !startsWith(github.ref, 'refs/heads/dependabot') }}
#     needs: [ build ]
#    uses: ./.github/workflows/create-badges-update-readme-workflow.yml
#    with:
#       COVERAGE_PERCENTAGE: ${{ needs.build.outputs.COVERAGE_PERCENTAGE }}
#     WORKFLOW_FILE: "java-microservice-build-with-policy-scan.yml"
#       BUILD_JOB_STATUS: ${{ needs.build.outputs.BUILD_JOB_STATUS }}

#   metric-datadog:
#     runs-on: ubuntu-latest
#     needs: [ build ]
#     steps:

#       - name: Checkout Git Repo
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 0
#           ref: ${{ github.ref_name }}

#       - name: Set environment variables defined in the ENV_CONFIG_FILE
#         shell: bash
#         run: |
#           IFS="["
#           while read -r -a LINE || [ -n "$LINE" ] ; do
#             if [[ -n "$LINE" && ${LINE::1} != "#" ]]; then
#               echo "$LINE" | xargs;
#             fi
#           done  ${{ env.ENV_CONFIG_FILE }} >> $GITHUB_ENV

#       # sends custom metrics to Datadog
#       - name: Send Metric to DataDog
#         if: ${{ env.DD_API_KEY_SECRET_NAME }}
#         uses: masci/datadog@v1.4.1
#         with:
#           api-key: ${{secrets[env.DD_API_KEY_SECRET_NAME]}}
#           api-url: https://app.datadoghq.com
#           metrics: |

#              # sends custom metrics of code-coverage % to Datadog
#              - type: ""
#                name: "code.coverage.${{ github.event.repository.name }}"
#                value: ${{ needs.build.outputs.COVERAGE_PERCENTAGE }}
#                host: ${{ github.repository_owner }}
#                tags:
#                  - "project:${{ github.event.repository.name }}"
#                  - "branch:${{ github.ref_name }}"

#              # sends custom metrics of Stale PRs % to Datadog
#              - type: ""
#                name: "Stale-PRs.${{ github.event.repository.name }}"
#                value: ${{ needs.call-badges.outputs.STALE_PR_OUTPUT }}
#                host: ${{ github.repository_owner }}
#                tags:
#                  - "project:${{ github.event.repository.name }}"
#                  - "branch:${{ github.ref_name }}"

#              # sends custom metrics of Out-of-date dependencies % to Datadog
#              - type: ""
#                name: "Out-of-date.${{ github.event.repository.name }}"
#                value: ${{ needs.call-badges.outputs.DEPENDENCIES_OUT_OF_DATE_OUTPUT }}
#                host: ${{ github.repository_owner }}
#                tags:
#                  - "project:${{ github.event.repository.name }}"
#                  - "branch:${{ github.ref_name }}"

#              # sends custom metrics of Lines-of-code % to Datadog
#              - type: ""
#                name: "Lines-of-code.${{ github.event.repository.name }}"
#                value: ${{ needs.call-badges.outputs.LINES_OF_CODE_OUTPUT }}
#                host: ${{ github.repository_owner }}
#                tags:
#                  - "project:${{ github.event.repository.name }}"
#                  - "branch:${{ github.ref_name }}"

#              # sends custom metrics of Veracode vulnerabilities % to Datadog
#              - type: ""
#                name: "Veracode-vulnerabilities.${{ github.event.repository.name }}"
#                value: ${{ needs.call-badges.outputs.VERACODE_COUNT_OUTPUT }}
#                host: ${{ github.repository_owner }}
#                tags:
#                  - "project:${{ github.event.repository.name }}"
#                  - "branch:${{ github.ref_name }}"
#       - name: Run post build step
#         env:
#           ARTIFACTORY_TOKEN: ${{ secrets.ARTIFACTORY_TOKEN }}
#           TR-JFROG-AWS: ${{ secrets.ARTIFACTORY_TOKEN }}
#           JOB_NAME: CI-$env
#           BUILD_NUMBER: ${{ github.run_number }}
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         run: |
#           echo "TAG=Java-CI-$env:BUILD_NUMBER-AMS" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
                 
#    publish:
#    runs-on: ubuntu-latest
#    if: (github.event.inputs == '')
#    needs: [ build ]
#    steps:
#        Check out repo at latest commit
#       - name: Checkout Git Repo
#         uses: actions/checkout@v3

#       - name: Publish Dev/Hotfix Release
#         shell: sh
#         run: gh release edit latest ${{ needs.build.outputs.BRANCH_RELEASE_TAG }} --draft=false
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
